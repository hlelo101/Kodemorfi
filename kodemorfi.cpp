#include <iostream>
#include <vector>
#include <fstream>
#include <sstream>
#include <algorithm>

// Variables
std::string version = "vP-10.06.24";
std::vector<std::string> lines;
std::string parsedCode = "<!-- Generated by Kodemorfi " + version + " -->";
bool executed = false;
char isSyntaxChar = 'n';

//Split string
std::vector<std::string> splitString(const std::string& str, char delimiter) {
    std::vector<std::string> tokens;
    std::stringstream ss(str);
    std::string token;
    
    while (std::getline(ss, token, delimiter)) {
        tokens.push_back(token);
    }
    
    return tokens;
}

//Check if includes word propreties
bool isSyntax(const std::string& word) {
    if(word.size() > 2) {
        std::string lastTwoChars = word.substr(word.size() - 2);
        if(word.size() > 3 && word[0] == '/' && word[2] == '/' && word.back() == '\\') {
            isSyntaxChar = 'n';
            return true;
        } else if (word.size() > 3 && word[0] == '/' && word[2] == '/' && lastTwoChars == "\\?") {
            isSyntaxChar = '?';
            return true;
        } else if (word.size() > 3 && word[0] == '/' && word[2] == '/' && lastTwoChars == "\\!") {
            isSyntaxChar = '!';
            return true;
        } else if (word.size() > 3 && word[0] == '/' && word[2] == '/' && lastTwoChars == "\\.") {
            isSyntaxChar = '.';
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
    return false;
}

// Trim string
std::string trimString(const std::string& str, size_t fromIndex, size_t toIndex) {
    if (fromIndex >= str.size() || toIndex >= str.size() || fromIndex > toIndex) {
        return "";
    }
    return str.substr(fromIndex + 1, toIndex - fromIndex - 1);
}

// Gather array into a string
std::string gatherArrayToString(const std::vector<std::string> array, int from, int to) {
    std::string str;
    for(int i = from; i < to; i++) {
        str = str + array[i] + " ";
    }
    return str;
}

void computeLines() {
    for(int i = 0; i!=lines.size(); i++) {
        if(!lines[i].empty()) {
            std::vector<std::string> words = splitString(lines[i], ' ');

            for(int i2 = 0; i2!=words.size(); i2++) { // Custom word syntax check
                if(isSyntax(words[i2])) {
                    if(words[i2].at(1) == 'b') { // Bold word
                        std::cout << "Line " << (i2 + 1) << " word " << (i2 + 1) << ": " << "Bold text. Computing... ";
                        if(isSyntaxChar != 'n') {
                            words[i2] = "<b>" + trimString(words[i2], 2, (words[i2].size() - 2)) + "</b>" + isSyntaxChar;
                        } else {
                            words[i2] = "<b>" + trimString(words[i2], 2, (words[i2].size() - 1)) + "</b>";
                        }
                        lines[i] = gatherArrayToString(words, 0, words.size());
                        std::cout << "Done" << std::endl;
                    }
                    if(words[i2].at(1) == 'i') { // Italic word
                        std::cout << "Line " << (i2 + 1) << " word " << (i2 + 1) << ": " << "Bold text. Computing... ";
                        if(isSyntaxChar != 'n') {
                            words[i2] = "<i>" + trimString(words[i2], 2, (words[i2].size() - 2)) + "</i>" + isSyntaxChar;
                        } else {
                            words[i2] = "<i>" + trimString(words[i2], 2, (words[i2].size() - 1)) + "</i>";
                        }
                        lines[i] = gatherArrayToString(words, 0, words.size());
                        std::cout << "Done" << std::endl;
                    }
                    if(words[i2].at(1) == 'u') { // Underline word
                        std::cout << "Line " << (i2 + 1) << " word " << (i2 + 1) << ": " << "Bold text. Computing... ";
                        if(isSyntaxChar != 'n') {
                            words[i2] = "<u>" + trimString(words[i2], 2, (words[i2].size() - 2)) + "</u>" + isSyntaxChar;
                        } else {
                            words[i2] = "<u>" + trimString(words[i2], 2, (words[i2].size() - 1)) + "</u>";
                        }
                        lines[i] = gatherArrayToString(words, 0, words.size());
                        std::cout << "Done" << std::endl;
                    }
                }
            }

            if(lines[i].at(0) == '#') { // Big text
                std::cout << "Line " << (i + 1) << ": " << "Big text. Computing... ";
                parsedCode = parsedCode + "<h1>" + lines[i].substr(1) + "</h1>";
                std::cout << "Done" << std::endl;
            } else if(lines[i].at(0) == '\\') { // Escape
                std::cout << "Line " << (i + 1) << ": " << "Escape character. Computing... ";
                parsedCode = parsedCode + "<p>" + lines[i].substr(1) + "</p>";
                std::cout << "Done" << std::endl;
            } else if(lines[i].at(0) == '[' && lines[i].at(2) == ']' || lines[i].at(0) == '[' && lines[i].at(4) == ']') { // Custom font size
                std::cout << "Line " << (i + 1) << ": " << "Custom size text. Computing... ";
                if(lines[i].at(4) == ']') {
                    parsedCode = parsedCode + "<p style=\"font-size: " + lines[i].substr(1, 3) + "em\">" + lines[i].substr(5) + "</p>";
                } else { // Default
                    parsedCode = parsedCode + "<p style=\"font-size: " + lines[i].substr(1, 1) + "em\">" + lines[i].substr(3) + "</p>";
                }
                std::cout << "Done" << std::endl;
            } else if(lines[i].at(0) == '-' && lines[i].length() == 1) { // separator
                parsedCode = parsedCode + "<hr>";
            } else {
                parsedCode = parsedCode + "<p>" + lines[i] + "</p>";
            }
        } else {
            parsedCode = parsedCode + "<br>";
        }
    }

    std::cout << "HTML:\n" << parsedCode << std::endl;
}
int main() {
    bool error = false;
    std::cout << "Kodemorfi " << version << std::endl;
    std::cout << "Reading file... ";
    std::ifstream readFile;
    readFile.open("main.km");
    if (readFile.is_open()) {
        std::cout << "Done" << std::endl;
        std::string line;
        while (std::getline(readFile, line)) {
            lines.push_back(line);
        }
        readFile.close();
        computeLines();
    } else {
        std::cout << "Error\nAn error occured during file opening. Ensure that \"main.km\" is present." << std::endl;
        error = true;
    }
    if(!error) {
        std::cout << "Writing file... ";
        std::ofstream writeFile;
        writeFile.open("kodemorfi_output.html");
        writeFile << parsedCode;
        writeFile.close();
        std::cout << "Done" << std::endl;
    }
    return 0;
}